generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Issue {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String
  status      Status   @default(TODO)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       Label    @default(BUG)
  priority    Priority @default(LOW)
  assets      Asset[]
}

model Asset {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(255)
  type      String   @db.VarChar(127)
  createdAt DateTime @default(now())
  issueId   Int
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

enum Status {
  TODO
  IN_PROGRESS
  CANCELLED
  DONE
  BACKLOG
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Label {
  BUG
  FEATURE
  DOCUMENTATION
}

// users

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
